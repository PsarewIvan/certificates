extends ../layout.pug

block content
    include ../components/card.pug
    include ../components/text-input.pug
    include ../components/button.pug
    include ../components/datepicker.pug
    include ../icons/caretLeft.pug

    .main
        .header-first.header-first__not-mobile.js-header-first
            .header-first__title.js-header-first-title Покупка сертификата
            .header-first__text.js-header-first-text Вишня, м. Новокузнецкая
        .header-second
            button.header-second__back-button(type='button')
                +caretLeft('header-second__back-icon')
            .header-second__title Дизайн и получатель
            .header-second__steps Шаг 4 из 5

        .steps.steps_columns
            .cards.cards_single.cards__step-four
                +card({name: 'Название сертификата длинным названием', price: '2 000', status: 'Действует 365 дней после активации', address: 'Вишня, м. Новокузнецкая', hasBg:'true', hasImg: 'true', hasBtns: 'true', className: 'default-color'})

                .bg-tabs.js-bg-tabs
                    button.bg-tabs__button.default.js-bg-tab-button(type='button')
                        .bg-tabs__button-bg.js-bg-tabs-button

            .step
                +text-input({label: 'Телефон получателя', type: 'tel', subText: 'Ссылка на сертификат придёт в WhatsApp или SMS', name: 'inputPhone'})
                .step-calendar
                    +datepicker({name: "index-sort-from", label: 'День отправления', className: 'index-datepicker'})
                    +text-input({label: 'Время', name: 'inputTime', className: 'step-calendar__field'})
                +text-input({label: 'Имя получателя', name: 'inputSenderName'})
                .link-button.js-step-four-add-button
                    button.link-button__button(type="button") Добавить поздравление
                +text-input({label: 'Текст поздравления', name: 'inputCongratulations', className:'hidden js-step-four-adding-input'})
                +text-input({label: 'Имя отправителя', name: 'inputRecipientName', className:'hidden js-step-four-adding-input'})

                .button-wrapper
                    +button({text: 'Далее', className: 'button-wrapper__button'})

    script(src="libs/datepicker.js")
    script.
        // Включение дополнительного блока
        (() => {
            const addingButton = document.querySelector('.js-step-four-add-button');
            const addingInputs = document.querySelectorAll('.js-step-four-adding-input');

            addingButton?.addEventListener('click', () => {
                addingInputs.forEach((input) => {
                    input.classList.remove('hidden');
                });

                addingButton.classList.add('hidden');
            });
        })();

        // Переключение картинок
        (() => {
            const IMG_PATHS = [
                'img/baloon.png',
                'img/cake.png',
                'img/gift.png',
                'img/heart.png',
                'img/flower.png',
            ];
            const cardImg = document.querySelector('.js-card-img');
            const buttonLeft = document.querySelector('.js-card-button-left');
            const buttonRight = document.querySelector('.js-card-button-right');

            setCardImg(IMG_PATHS[0]);

            buttonLeft?.addEventListener('click', handleButtonLeftClick);

            buttonRight?.addEventListener('click', handleButtonRightClick);

            function handleButtonLeftClick() {
                clickCallback((index) => {
                    if (index > 0) {
                        setCardImg(IMG_PATHS[index - 1]);
                    } else {
                        setCardImg(IMG_PATHS[IMG_PATHS.length - 1]);
                    }
                });
            }

            function handleButtonRightClick() {
                clickCallback((index) => {
                    if (index < IMG_PATHS.length - 1) {
                        setCardImg(IMG_PATHS[index + 1]);
                    } else {
                        setCardImg(IMG_PATHS[0]);
                    }
                });
            }

            function clickCallback(callback) {
                const currentBg = getCardBg();

                if (!currentBg) return;

                IMG_PATHS.forEach((path, index) => {
                    if (currentBg.includes(path)) {
                        callback(index);
                    }
                });
            }

            function setCardImg(path) {
                if (cardImg) {
                    cardImg.style.backgroundImage = `url('${path}')`;
                }
            }

            function getCardBg() {
                return cardImg?.style.backgroundImage;
            }
        })();

        // Переключение фона
        (() => {
            const BG_PATHS = [
                'img/gradient01.png',
                'img/gradient02.png',
                'img/gradient03.png',
                'img/gradient04.png',
                'img/gradient05.png',
            ];

            tabButtonsRender();

            const tabButtons = document.querySelectorAll('.js-bg-tab-button');

            tabButtons.forEach((button) => {
                button.addEventListener('click', handleBgButtonClick);
            });

            function handleBgButtonClick() {
                const button = event.currentTarget;
                const buttonBg = button.querySelector('.js-bg-tabs-button');

                setActiveTab(button);
                const bg = buttonBg?.style?.backgroundImage;

                setCardBg(bg ?? 'none');
            }

            function tabButtonsRender() {
                const tabsBlock = document.querySelector('.js-bg-tabs');

                if (!tabsBlock) return;

                BG_PATHS.forEach((path, index) => {
                    const button = getTabButton(path);

                    if (index === 0) {
                        button.classList.add('active');
                        setCardBg(`url("${path}")`);
                    }

                    tabsBlock.appendChild(button);
                });
            }

            function getTabButton(bgPath) {
                const button = document.createElement('button');
                const buttonBg = document.createElement('div');
                button.type = 'button';
                button.classList.add('bg-tabs__button', 'js-bg-tab-button');
                buttonBg.classList.add('bg-tabs__button-bg', 'js-bg-tabs-button');
                buttonBg.style.backgroundImage = `url("${bgPath}")`;
                button.appendChild(buttonBg);

                return button;
            }

            function setCardBg(bg) {
                const cardBg = document.querySelector('.js-card-bg');

                if (!cardBg) return;

                cardBg.style.backgroundImage = bg;
            }

            function setActiveTab(activeTab) {
                tabButtons.forEach((tab) => {
                    tab.classList.remove('active');
                });

                activeTab.classList.add('active');
            }
        })();

        // Календарь
        (() => {
            const MOBILE_WIDTH = 724;

            const dateInputWrapper = document.querySelector('.js-datepicker-wrapper');
            const calendar = dateInputWrapper?.querySelector('.js-datepicker-calendar-icon');
            const reset = dateInputWrapper?.querySelector('.js-datepicker-reset');
            const dateInput = dateInputWrapper?.querySelector('.js-datepicker');

            let datepicker = initDatepicker();

            initCalendar();

            window.addEventListener('resize', initCalendar);

            function initCalendar() {
                if (!dateInput) return;

                if (isMobile()) {
                    datepicker.destroy();
                    dateInput.type = "date";
                } else {
                    if (datepicker) {
                        datepicker.destroy();
                    }

                    dateInput.type = "text";
                    datepicker = initDatepicker();
                }
            }

            function initDatepicker() {
                if (typeof Datepicker !== 'function') {
                    return;
                }

                dateInput?.addEventListener('changeDate', handleDateChange);
                reset?.addEventListener('click', handleResetClick);

                return dateInput ? new Datepicker(dateInput, {
                    language: 'ru',
                    autohide: true,
                    maxView: 2,
                    todayHighlight: true,
                    prevArrow: getChevronIcon(),
                    nextArrow: getChevronIcon(),
                }) : null;
            }

            function handleDateChange(event) {
                if (!event.target.value || event.target.value === '') {
                    calendar?.classList.remove('hidden');
                    reset?.classList.add('hidden');
                    dateInputWrapper?.classList.remove('datepicker-component_selected');
                } else {
                    calendar?.classList.add('hidden');
                    reset?.classList.remove('hidden');
                    dateInputWrapper?.classList.add('datepicker-component_selected');
                }
            }

            function handleResetClick() {
                datepicker?.setDate({ clear: true });
                calendar?.classList.remove('hidden');
                reset?.classList.add('hidden');
                dateInputWrapper?.classList.remove('datepicker-component_selected');
            }

            function isMobile() {
                return window.innerWidth <= MOBILE_WIDTH;
            }

            function getChevronIcon() {
                return `
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M15.5303 3.96967C15.8232 4.26256 15.8232 4.73744 15.5303 5.03033L8.56066 12L15.5303 18.9697C15.8232 19.2626 15.8232 19.7374 15.5303 20.0303C15.2374 20.3232 14.7626 20.3232 14.4697 20.0303L6.96967 12.5303C6.67678 12.2374 6.67678 11.7626 6.96967 11.4697L14.4697 3.96967C14.7626 3.67678 15.2374 3.67678 15.5303 3.96967Z" fill="#5C5C5C"/>
                    </svg>`;
            }
        })();
