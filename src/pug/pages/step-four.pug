extends ../layout.pug

block content
    include ../components/card.pug
    include ../components/text-input.pug
    include ../components/button.pug
    include ../icons/caretLeft.pug

    .main
        .header-first.header-first__not-mobile.js-header-first
            .header-first__title.js-header-first-title Покупка сертификата
            .header-first__text.js-header-first-text Вишня, м. Новокузнецкая
        .header-second
            button.header-second__back-button(type='button')
                +caretLeft('header-second__back-icon')
            .header-second__title Дизайн и получатель
            .header-second__steps Шаг 4 из 5

        .steps.steps_columns
            .cards.cards_single.cards__step-four
                +card({name: 'Название сертификата длинным названием', price: '2 000', status: 'Действует 365 дней после активации', address: 'Вишня, м. Новокузнецкая', hasBg:'true', hasImg: 'true', hasBtns: 'true', className: 'default-color'})

                .bg-tabs.js-bg-tabs
                    button.bg-tabs__button.default.js-bg-tab-button(type='button')
                        .bg-tabs__button-bg.js-bg-tabs-button

            .step
                +text-input({label: 'Телефон получателя', type: 'tel', subText: 'Ссылка на сертификат придёт в WhatsApp или SMS', name: 'inputPhone'})
                +text-input({label: 'Имя получателя', name: 'inputSenderName'})
                .link-button.js-step-four-add-button
                    button.link-button__button(type="button") Добавить поздравление
                +text-input({label: 'Текст поздравления', name: 'inputCongratulations', className:'hidden js-step-four-adding-input'})
                +text-input({label: 'Имя отправителя', name: 'inputRecipientName', className:'hidden js-step-four-adding-input'})

                .button-wrapper
                    +button({text: 'Далее', className: 'button-wrapper__button'})

    script.
        // Включение дополнительного блока
        (() => {
            const addingButton = document.querySelector('.js-step-four-add-button');
            const addingInputs = document.querySelectorAll('.js-step-four-adding-input');

            addingButton?.addEventListener('click', () => {
                addingInputs.forEach((input) => {
                    input.classList.remove('hidden');
                });

                addingButton.classList.add('hidden');
            });
        })();

        // Переключение картинок
        (() => {
            const IMG_PATHS = [
                'img/baloon.png',
                'img/cake.png',
                'img/gift.png',
                'img/heart.png',
                'img/flower.png',
            ];
            const cardImg = document.querySelector('.js-card-img');
            const buttonLeft = document.querySelector('.js-card-button-left');
            const buttonRight = document.querySelector('.js-card-button-right');

            setCardImg(IMG_PATHS[0]);

            buttonLeft?.addEventListener('click', handleButtonLeftClick);

            buttonRight?.addEventListener('click', handleButtonRightClick);

            function handleButtonLeftClick() {
                clickCallback((index) => {
                    if (index > 0) {
                        setCardImg(IMG_PATHS[index - 1]);
                    } else {
                        setCardImg(IMG_PATHS[IMG_PATHS.length - 1]);
                    }
                });
            }

            function handleButtonRightClick() {
                clickCallback((index) => {
                    if (index < IMG_PATHS.length - 1) {
                        setCardImg(IMG_PATHS[index + 1]);
                    } else {
                        setCardImg(IMG_PATHS[0]);
                    }
                });
            }

            function clickCallback(callback) {
                const currentBg = getCardBg();

                if (!currentBg) return;

                IMG_PATHS.forEach((path, index) => {
                    if (currentBg.includes(path)) {
                        callback(index);
                    }
                });
            }

            function setCardImg(path) {
                if (cardImg) {
                    cardImg.style.backgroundImage = `url('${path}')`;
                }
            }

            function getCardBg() {
                return cardImg?.style.backgroundImage;
            }
        })();

        // Переключение фона
        (() => {
            const BG_PATHS = [
                'img/gradient01.png',
                'img/gradient02.png',
                'img/gradient03.png',
                'img/gradient04.png',
                'img/gradient05.png',
            ];

            tabButtonsRender();

            const tabButtons = document.querySelectorAll('.js-bg-tab-button');

            tabButtons.forEach((button) => {
                button.addEventListener('click', handleBgButtonClick);
            });

            function handleBgButtonClick() {
                const button = event.currentTarget;
                const buttonBg = button.querySelector('.js-bg-tabs-button');

                setActiveTab(button);
                const bg = buttonBg?.style?.backgroundImage;

                setCardBg(bg ?? 'none');
            }

            function tabButtonsRender() {
                const tabsBlock = document.querySelector('.js-bg-tabs');

                if (!tabsBlock) return;

                BG_PATHS.forEach((path, index) => {
                    const button = getTabButton(path);

                    if (index === 0) {
                        button.classList.add('active');
                        setCardBg(`url("${path}")`);
                    }

                    tabsBlock.appendChild(button);
                });
            }

            function getTabButton(bgPath) {
                const button = document.createElement('button');
                const buttonBg = document.createElement('div');
                button.type = 'button';
                button.classList.add('bg-tabs__button', 'js-bg-tab-button');
                buttonBg.classList.add('bg-tabs__button-bg', 'js-bg-tabs-button');
                buttonBg.style.backgroundImage = `url("${bgPath}")`;
                button.appendChild(buttonBg);

                return button;
            }

            function setCardBg(bg) {
                const cardBg = document.querySelector('.js-card-bg');

                if (!cardBg) return;

                cardBg.style.backgroundImage = bg;
            }

            function setActiveTab(activeTab) {
                tabButtons.forEach((tab) => {
                    tab.classList.remove('active');
                });

                activeTab.classList.add('active');
            }
        })();

